/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-11-22 19:59:01 UTC)
 * on 2013-12-02 at 22:28:59 UTC 
 * Modify at your own risk.
 */

package de.hsb.kss.mc_schnitzeljagd.persistence.questendpoint.model;

/**
 * Model definition for Riddle.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the questendpoint. For a detailed explanation see:
 * <a href="http://code.google.com/p/google-http-java-client/wiki/JSON">http://code.google.com/p/google-http-java-client/wiki/JSON</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Riddle extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Key key;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean mandatory;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxPoints;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer riddleId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String solution;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean solved;

  /**
   * @return value or {@code null} for none
   */
  public Key getKey() {
    return key;
  }

  /**
   * @param key key or {@code null} for none
   */
  public Riddle setKey(Key key) {
    this.key = key;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMandatory() {
    return mandatory;
  }

  /**
   * @param mandatory mandatory or {@code null} for none
   */
  public Riddle setMandatory(java.lang.Boolean mandatory) {
    this.mandatory = mandatory;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxPoints() {
    return maxPoints;
  }

  /**
   * @param maxPoints maxPoints or {@code null} for none
   */
  public Riddle setMaxPoints(java.lang.Integer maxPoints) {
    this.maxPoints = maxPoints;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRiddleId() {
    return riddleId;
  }

  /**
   * @param riddleId riddleId or {@code null} for none
   */
  public Riddle setRiddleId(java.lang.Integer riddleId) {
    this.riddleId = riddleId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSolution() {
    return solution;
  }

  /**
   * @param solution solution or {@code null} for none
   */
  public Riddle setSolution(java.lang.String solution) {
    this.solution = solution;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSolved() {
    return solved;
  }

  /**
   * @param solved solved or {@code null} for none
   */
  public Riddle setSolved(java.lang.Boolean solved) {
    this.solved = solved;
    return this;
  }

  @Override
  public Riddle set(String fieldName, Object value) {
    return (Riddle) super.set(fieldName, value);
  }

  @Override
  public Riddle clone() {
    return (Riddle) super.clone();
  }

}
